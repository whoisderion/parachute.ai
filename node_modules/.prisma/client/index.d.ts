
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Recording
 * 
 */
export type Recording = {
  cloudinaryID: string
  cloudinaryURL: string
  name: string | null
  userId: string
  analysisId: string | null
  transcriptId: string | null
}

/**
 * Model Analysis
 * 
 */
export type Analysis = {
  id: string
  text: string
  summary: boolean
  sentiment: boolean
  flag: boolean
  caller_question: boolean
  employee_question: boolean
}

/**
 * Model Transcript
 * 
 */
export type Transcript = {
  id: string
  text: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  text: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Recordings
 * const recordings = await prisma.recording.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Recordings
   * const recordings = await prisma.recording.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.recording`: Exposes CRUD operations for the **Recording** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recordings
    * const recordings = await prisma.recording.findMany()
    * ```
    */
  get recording(): Prisma.RecordingDelegate<GlobalReject>;

  /**
   * `prisma.analysis`: Exposes CRUD operations for the **Analysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Analyses
    * const analyses = await prisma.analysis.findMany()
    * ```
    */
  get analysis(): Prisma.AnalysisDelegate<GlobalReject>;

  /**
   * `prisma.transcript`: Exposes CRUD operations for the **Transcript** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transcripts
    * const transcripts = await prisma.transcript.findMany()
    * ```
    */
  get transcript(): Prisma.TranscriptDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Recording: 'Recording',
    Analysis: 'Analysis',
    Transcript: 'Transcript',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AnalysisCountOutputType
   */


  export type AnalysisCountOutputType = {
    Recording: number
  }

  export type AnalysisCountOutputTypeSelect = {
    Recording?: boolean
  }

  export type AnalysisCountOutputTypeGetPayload<S extends boolean | null | undefined | AnalysisCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AnalysisCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AnalysisCountOutputTypeArgs)
    ? AnalysisCountOutputType 
    : S extends { select: any } & (AnalysisCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AnalysisCountOutputType ? AnalysisCountOutputType[P] : never
  } 
      : AnalysisCountOutputType




  // Custom InputTypes

  /**
   * AnalysisCountOutputType without action
   */
  export type AnalysisCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AnalysisCountOutputType
     */
    select?: AnalysisCountOutputTypeSelect | null
  }



  /**
   * Count Type TranscriptCountOutputType
   */


  export type TranscriptCountOutputType = {
    Recording: number
  }

  export type TranscriptCountOutputTypeSelect = {
    Recording?: boolean
  }

  export type TranscriptCountOutputTypeGetPayload<S extends boolean | null | undefined | TranscriptCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TranscriptCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TranscriptCountOutputTypeArgs)
    ? TranscriptCountOutputType 
    : S extends { select: any } & (TranscriptCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TranscriptCountOutputType ? TranscriptCountOutputType[P] : never
  } 
      : TranscriptCountOutputType




  // Custom InputTypes

  /**
   * TranscriptCountOutputType without action
   */
  export type TranscriptCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TranscriptCountOutputType
     */
    select?: TranscriptCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    recordings: number
  }

  export type UserCountOutputTypeSelect = {
    recordings?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Recording
   */


  export type AggregateRecording = {
    _count: RecordingCountAggregateOutputType | null
    _min: RecordingMinAggregateOutputType | null
    _max: RecordingMaxAggregateOutputType | null
  }

  export type RecordingMinAggregateOutputType = {
    cloudinaryID: string | null
    cloudinaryURL: string | null
    name: string | null
    userId: string | null
    analysisId: string | null
    transcriptId: string | null
  }

  export type RecordingMaxAggregateOutputType = {
    cloudinaryID: string | null
    cloudinaryURL: string | null
    name: string | null
    userId: string | null
    analysisId: string | null
    transcriptId: string | null
  }

  export type RecordingCountAggregateOutputType = {
    cloudinaryID: number
    cloudinaryURL: number
    name: number
    userId: number
    analysisId: number
    transcriptId: number
    _all: number
  }


  export type RecordingMinAggregateInputType = {
    cloudinaryID?: true
    cloudinaryURL?: true
    name?: true
    userId?: true
    analysisId?: true
    transcriptId?: true
  }

  export type RecordingMaxAggregateInputType = {
    cloudinaryID?: true
    cloudinaryURL?: true
    name?: true
    userId?: true
    analysisId?: true
    transcriptId?: true
  }

  export type RecordingCountAggregateInputType = {
    cloudinaryID?: true
    cloudinaryURL?: true
    name?: true
    userId?: true
    analysisId?: true
    transcriptId?: true
    _all?: true
  }

  export type RecordingAggregateArgs = {
    /**
     * Filter which Recording to aggregate.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recordings
    **/
    _count?: true | RecordingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordingMaxAggregateInputType
  }

  export type GetRecordingAggregateType<T extends RecordingAggregateArgs> = {
        [P in keyof T & keyof AggregateRecording]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecording[P]>
      : GetScalarType<T[P], AggregateRecording[P]>
  }




  export type RecordingGroupByArgs = {
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithAggregationInput>
    by: RecordingScalarFieldEnum[]
    having?: RecordingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordingCountAggregateInputType | true
    _min?: RecordingMinAggregateInputType
    _max?: RecordingMaxAggregateInputType
  }


  export type RecordingGroupByOutputType = {
    cloudinaryID: string
    cloudinaryURL: string
    name: string | null
    userId: string
    analysisId: string | null
    transcriptId: string | null
    _count: RecordingCountAggregateOutputType | null
    _min: RecordingMinAggregateOutputType | null
    _max: RecordingMaxAggregateOutputType | null
  }

  type GetRecordingGroupByPayload<T extends RecordingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RecordingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordingGroupByOutputType[P]>
            : GetScalarType<T[P], RecordingGroupByOutputType[P]>
        }
      >
    >


  export type RecordingSelect = {
    cloudinaryID?: boolean
    cloudinaryURL?: boolean
    name?: boolean
    userId?: boolean
    analysisId?: boolean
    transcriptId?: boolean
    creator?: boolean | UserArgs
    analysis?: boolean | AnalysisArgs
    transcript?: boolean | TranscriptArgs
  }


  export type RecordingInclude = {
    creator?: boolean | UserArgs
    analysis?: boolean | AnalysisArgs
    transcript?: boolean | TranscriptArgs
  }

  export type RecordingGetPayload<S extends boolean | null | undefined | RecordingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Recording :
    S extends undefined ? never :
    S extends { include: any } & (RecordingArgs | RecordingFindManyArgs)
    ? Recording  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'analysis' ? AnalysisGetPayload<S['include'][P]> | null :
        P extends 'transcript' ? TranscriptGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (RecordingArgs | RecordingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'analysis' ? AnalysisGetPayload<S['select'][P]> | null :
        P extends 'transcript' ? TranscriptGetPayload<S['select'][P]> | null :  P extends keyof Recording ? Recording[P] : never
  } 
      : Recording


  type RecordingCountArgs = 
    Omit<RecordingFindManyArgs, 'select' | 'include'> & {
      select?: RecordingCountAggregateInputType | true
    }

  export interface RecordingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Recording that matches the filter.
     * @param {RecordingFindUniqueArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecordingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecordingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recording'> extends True ? Prisma__RecordingClient<RecordingGetPayload<T>> : Prisma__RecordingClient<RecordingGetPayload<T> | null, null>

    /**
     * Find one Recording that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecordingFindUniqueOrThrowArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecordingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RecordingFindUniqueOrThrowArgs>
    ): Prisma__RecordingClient<RecordingGetPayload<T>>

    /**
     * Find the first Recording that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindFirstArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecordingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecordingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recording'> extends True ? Prisma__RecordingClient<RecordingGetPayload<T>> : Prisma__RecordingClient<RecordingGetPayload<T> | null, null>

    /**
     * Find the first Recording that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindFirstOrThrowArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecordingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RecordingFindFirstOrThrowArgs>
    ): Prisma__RecordingClient<RecordingGetPayload<T>>

    /**
     * Find zero or more Recordings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recordings
     * const recordings = await prisma.recording.findMany()
     * 
     * // Get first 10 Recordings
     * const recordings = await prisma.recording.findMany({ take: 10 })
     * 
     * // Only select the `cloudinaryID`
     * const recordingWithCloudinaryIDOnly = await prisma.recording.findMany({ select: { cloudinaryID: true } })
     * 
    **/
    findMany<T extends RecordingFindManyArgs>(
      args?: SelectSubset<T, RecordingFindManyArgs>
    ): Prisma.PrismaPromise<Array<RecordingGetPayload<T>>>

    /**
     * Create a Recording.
     * @param {RecordingCreateArgs} args - Arguments to create a Recording.
     * @example
     * // Create one Recording
     * const Recording = await prisma.recording.create({
     *   data: {
     *     // ... data to create a Recording
     *   }
     * })
     * 
    **/
    create<T extends RecordingCreateArgs>(
      args: SelectSubset<T, RecordingCreateArgs>
    ): Prisma__RecordingClient<RecordingGetPayload<T>>

    /**
     * Create many Recordings.
     *     @param {RecordingCreateManyArgs} args - Arguments to create many Recordings.
     *     @example
     *     // Create many Recordings
     *     const recording = await prisma.recording.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecordingCreateManyArgs>(
      args?: SelectSubset<T, RecordingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recording.
     * @param {RecordingDeleteArgs} args - Arguments to delete one Recording.
     * @example
     * // Delete one Recording
     * const Recording = await prisma.recording.delete({
     *   where: {
     *     // ... filter to delete one Recording
     *   }
     * })
     * 
    **/
    delete<T extends RecordingDeleteArgs>(
      args: SelectSubset<T, RecordingDeleteArgs>
    ): Prisma__RecordingClient<RecordingGetPayload<T>>

    /**
     * Update one Recording.
     * @param {RecordingUpdateArgs} args - Arguments to update one Recording.
     * @example
     * // Update one Recording
     * const recording = await prisma.recording.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecordingUpdateArgs>(
      args: SelectSubset<T, RecordingUpdateArgs>
    ): Prisma__RecordingClient<RecordingGetPayload<T>>

    /**
     * Delete zero or more Recordings.
     * @param {RecordingDeleteManyArgs} args - Arguments to filter Recordings to delete.
     * @example
     * // Delete a few Recordings
     * const { count } = await prisma.recording.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecordingDeleteManyArgs>(
      args?: SelectSubset<T, RecordingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recordings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recordings
     * const recording = await prisma.recording.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecordingUpdateManyArgs>(
      args: SelectSubset<T, RecordingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recording.
     * @param {RecordingUpsertArgs} args - Arguments to update or create a Recording.
     * @example
     * // Update or create a Recording
     * const recording = await prisma.recording.upsert({
     *   create: {
     *     // ... data to create a Recording
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recording we want to update
     *   }
     * })
    **/
    upsert<T extends RecordingUpsertArgs>(
      args: SelectSubset<T, RecordingUpsertArgs>
    ): Prisma__RecordingClient<RecordingGetPayload<T>>

    /**
     * Count the number of Recordings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingCountArgs} args - Arguments to filter Recordings to count.
     * @example
     * // Count the number of Recordings
     * const count = await prisma.recording.count({
     *   where: {
     *     // ... the filter for the Recordings we want to count
     *   }
     * })
    **/
    count<T extends RecordingCountArgs>(
      args?: Subset<T, RecordingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recording.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordingAggregateArgs>(args: Subset<T, RecordingAggregateArgs>): Prisma.PrismaPromise<GetRecordingAggregateType<T>>

    /**
     * Group by Recording.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordingGroupByArgs['orderBy'] }
        : { orderBy?: RecordingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recording.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecordingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    creator<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    analysis<T extends AnalysisArgs= {}>(args?: Subset<T, AnalysisArgs>): Prisma__AnalysisClient<AnalysisGetPayload<T> | Null>;

    transcript<T extends TranscriptArgs= {}>(args?: Subset<T, TranscriptArgs>): Prisma__TranscriptClient<TranscriptGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recording base type for findUnique actions
   */
  export type RecordingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * Filter, which Recording to fetch.
     */
    where: RecordingWhereUniqueInput
  }

  /**
   * Recording findUnique
   */
  export interface RecordingFindUniqueArgs extends RecordingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recording findUniqueOrThrow
   */
  export type RecordingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * Filter, which Recording to fetch.
     */
    where: RecordingWhereUniqueInput
  }


  /**
   * Recording base type for findFirst actions
   */
  export type RecordingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * Filter, which Recording to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recordings.
     */
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }

  /**
   * Recording findFirst
   */
  export interface RecordingFindFirstArgs extends RecordingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recording findFirstOrThrow
   */
  export type RecordingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * Filter, which Recording to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recordings.
     */
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Recording findMany
   */
  export type RecordingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * Filter, which Recordings to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Recording create
   */
  export type RecordingCreateArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * The data needed to create a Recording.
     */
    data: XOR<RecordingCreateInput, RecordingUncheckedCreateInput>
  }


  /**
   * Recording createMany
   */
  export type RecordingCreateManyArgs = {
    /**
     * The data used to create many Recordings.
     */
    data: Enumerable<RecordingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recording update
   */
  export type RecordingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * The data needed to update a Recording.
     */
    data: XOR<RecordingUpdateInput, RecordingUncheckedUpdateInput>
    /**
     * Choose, which Recording to update.
     */
    where: RecordingWhereUniqueInput
  }


  /**
   * Recording updateMany
   */
  export type RecordingUpdateManyArgs = {
    /**
     * The data used to update Recordings.
     */
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyInput>
    /**
     * Filter which Recordings to update
     */
    where?: RecordingWhereInput
  }


  /**
   * Recording upsert
   */
  export type RecordingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * The filter to search for the Recording to update in case it exists.
     */
    where: RecordingWhereUniqueInput
    /**
     * In case the Recording found by the `where` argument doesn't exist, create a new Recording with this data.
     */
    create: XOR<RecordingCreateInput, RecordingUncheckedCreateInput>
    /**
     * In case the Recording was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordingUpdateInput, RecordingUncheckedUpdateInput>
  }


  /**
   * Recording delete
   */
  export type RecordingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    /**
     * Filter which Recording to delete.
     */
    where: RecordingWhereUniqueInput
  }


  /**
   * Recording deleteMany
   */
  export type RecordingDeleteManyArgs = {
    /**
     * Filter which Recordings to delete
     */
    where?: RecordingWhereInput
  }


  /**
   * Recording without action
   */
  export type RecordingArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
  }



  /**
   * Model Analysis
   */


  export type AggregateAnalysis = {
    _count: AnalysisCountAggregateOutputType | null
    _min: AnalysisMinAggregateOutputType | null
    _max: AnalysisMaxAggregateOutputType | null
  }

  export type AnalysisMinAggregateOutputType = {
    id: string | null
    text: string | null
    summary: boolean | null
    sentiment: boolean | null
    flag: boolean | null
    caller_question: boolean | null
    employee_question: boolean | null
  }

  export type AnalysisMaxAggregateOutputType = {
    id: string | null
    text: string | null
    summary: boolean | null
    sentiment: boolean | null
    flag: boolean | null
    caller_question: boolean | null
    employee_question: boolean | null
  }

  export type AnalysisCountAggregateOutputType = {
    id: number
    text: number
    summary: number
    sentiment: number
    flag: number
    caller_question: number
    employee_question: number
    _all: number
  }


  export type AnalysisMinAggregateInputType = {
    id?: true
    text?: true
    summary?: true
    sentiment?: true
    flag?: true
    caller_question?: true
    employee_question?: true
  }

  export type AnalysisMaxAggregateInputType = {
    id?: true
    text?: true
    summary?: true
    sentiment?: true
    flag?: true
    caller_question?: true
    employee_question?: true
  }

  export type AnalysisCountAggregateInputType = {
    id?: true
    text?: true
    summary?: true
    sentiment?: true
    flag?: true
    caller_question?: true
    employee_question?: true
    _all?: true
  }

  export type AnalysisAggregateArgs = {
    /**
     * Filter which Analysis to aggregate.
     */
    where?: AnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analyses to fetch.
     */
    orderBy?: Enumerable<AnalysisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Analyses
    **/
    _count?: true | AnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalysisMaxAggregateInputType
  }

  export type GetAnalysisAggregateType<T extends AnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalysis[P]>
      : GetScalarType<T[P], AggregateAnalysis[P]>
  }




  export type AnalysisGroupByArgs = {
    where?: AnalysisWhereInput
    orderBy?: Enumerable<AnalysisOrderByWithAggregationInput>
    by: AnalysisScalarFieldEnum[]
    having?: AnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalysisCountAggregateInputType | true
    _min?: AnalysisMinAggregateInputType
    _max?: AnalysisMaxAggregateInputType
  }


  export type AnalysisGroupByOutputType = {
    id: string
    text: string
    summary: boolean
    sentiment: boolean
    flag: boolean
    caller_question: boolean
    employee_question: boolean
    _count: AnalysisCountAggregateOutputType | null
    _min: AnalysisMinAggregateOutputType | null
    _max: AnalysisMaxAggregateOutputType | null
  }

  type GetAnalysisGroupByPayload<T extends AnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], AnalysisGroupByOutputType[P]>
        }
      >
    >


  export type AnalysisSelect = {
    id?: boolean
    text?: boolean
    summary?: boolean
    sentiment?: boolean
    flag?: boolean
    caller_question?: boolean
    employee_question?: boolean
    Recording?: boolean | Analysis$RecordingArgs
    _count?: boolean | AnalysisCountOutputTypeArgs
  }


  export type AnalysisInclude = {
    Recording?: boolean | Analysis$RecordingArgs
    _count?: boolean | AnalysisCountOutputTypeArgs
  }

  export type AnalysisGetPayload<S extends boolean | null | undefined | AnalysisArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Analysis :
    S extends undefined ? never :
    S extends { include: any } & (AnalysisArgs | AnalysisFindManyArgs)
    ? Analysis  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Recording' ? Array < RecordingGetPayload<S['include'][P]>>  :
        P extends '_count' ? AnalysisCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AnalysisArgs | AnalysisFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Recording' ? Array < RecordingGetPayload<S['select'][P]>>  :
        P extends '_count' ? AnalysisCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Analysis ? Analysis[P] : never
  } 
      : Analysis


  type AnalysisCountArgs = 
    Omit<AnalysisFindManyArgs, 'select' | 'include'> & {
      select?: AnalysisCountAggregateInputType | true
    }

  export interface AnalysisDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Analysis that matches the filter.
     * @param {AnalysisFindUniqueArgs} args - Arguments to find a Analysis
     * @example
     * // Get one Analysis
     * const analysis = await prisma.analysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnalysisFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnalysisFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Analysis'> extends True ? Prisma__AnalysisClient<AnalysisGetPayload<T>> : Prisma__AnalysisClient<AnalysisGetPayload<T> | null, null>

    /**
     * Find one Analysis that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnalysisFindUniqueOrThrowArgs} args - Arguments to find a Analysis
     * @example
     * // Get one Analysis
     * const analysis = await prisma.analysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnalysisFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AnalysisFindUniqueOrThrowArgs>
    ): Prisma__AnalysisClient<AnalysisGetPayload<T>>

    /**
     * Find the first Analysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisFindFirstArgs} args - Arguments to find a Analysis
     * @example
     * // Get one Analysis
     * const analysis = await prisma.analysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnalysisFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnalysisFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Analysis'> extends True ? Prisma__AnalysisClient<AnalysisGetPayload<T>> : Prisma__AnalysisClient<AnalysisGetPayload<T> | null, null>

    /**
     * Find the first Analysis that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisFindFirstOrThrowArgs} args - Arguments to find a Analysis
     * @example
     * // Get one Analysis
     * const analysis = await prisma.analysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnalysisFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AnalysisFindFirstOrThrowArgs>
    ): Prisma__AnalysisClient<AnalysisGetPayload<T>>

    /**
     * Find zero or more Analyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Analyses
     * const analyses = await prisma.analysis.findMany()
     * 
     * // Get first 10 Analyses
     * const analyses = await prisma.analysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analysisWithIdOnly = await prisma.analysis.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnalysisFindManyArgs>(
      args?: SelectSubset<T, AnalysisFindManyArgs>
    ): Prisma.PrismaPromise<Array<AnalysisGetPayload<T>>>

    /**
     * Create a Analysis.
     * @param {AnalysisCreateArgs} args - Arguments to create a Analysis.
     * @example
     * // Create one Analysis
     * const Analysis = await prisma.analysis.create({
     *   data: {
     *     // ... data to create a Analysis
     *   }
     * })
     * 
    **/
    create<T extends AnalysisCreateArgs>(
      args: SelectSubset<T, AnalysisCreateArgs>
    ): Prisma__AnalysisClient<AnalysisGetPayload<T>>

    /**
     * Create many Analyses.
     *     @param {AnalysisCreateManyArgs} args - Arguments to create many Analyses.
     *     @example
     *     // Create many Analyses
     *     const analysis = await prisma.analysis.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnalysisCreateManyArgs>(
      args?: SelectSubset<T, AnalysisCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Analysis.
     * @param {AnalysisDeleteArgs} args - Arguments to delete one Analysis.
     * @example
     * // Delete one Analysis
     * const Analysis = await prisma.analysis.delete({
     *   where: {
     *     // ... filter to delete one Analysis
     *   }
     * })
     * 
    **/
    delete<T extends AnalysisDeleteArgs>(
      args: SelectSubset<T, AnalysisDeleteArgs>
    ): Prisma__AnalysisClient<AnalysisGetPayload<T>>

    /**
     * Update one Analysis.
     * @param {AnalysisUpdateArgs} args - Arguments to update one Analysis.
     * @example
     * // Update one Analysis
     * const analysis = await prisma.analysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnalysisUpdateArgs>(
      args: SelectSubset<T, AnalysisUpdateArgs>
    ): Prisma__AnalysisClient<AnalysisGetPayload<T>>

    /**
     * Delete zero or more Analyses.
     * @param {AnalysisDeleteManyArgs} args - Arguments to filter Analyses to delete.
     * @example
     * // Delete a few Analyses
     * const { count } = await prisma.analysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnalysisDeleteManyArgs>(
      args?: SelectSubset<T, AnalysisDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Analyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Analyses
     * const analysis = await prisma.analysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnalysisUpdateManyArgs>(
      args: SelectSubset<T, AnalysisUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Analysis.
     * @param {AnalysisUpsertArgs} args - Arguments to update or create a Analysis.
     * @example
     * // Update or create a Analysis
     * const analysis = await prisma.analysis.upsert({
     *   create: {
     *     // ... data to create a Analysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Analysis we want to update
     *   }
     * })
    **/
    upsert<T extends AnalysisUpsertArgs>(
      args: SelectSubset<T, AnalysisUpsertArgs>
    ): Prisma__AnalysisClient<AnalysisGetPayload<T>>

    /**
     * Count the number of Analyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisCountArgs} args - Arguments to filter Analyses to count.
     * @example
     * // Count the number of Analyses
     * const count = await prisma.analysis.count({
     *   where: {
     *     // ... the filter for the Analyses we want to count
     *   }
     * })
    **/
    count<T extends AnalysisCountArgs>(
      args?: Subset<T, AnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Analysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalysisAggregateArgs>(args: Subset<T, AnalysisAggregateArgs>): Prisma.PrismaPromise<GetAnalysisAggregateType<T>>

    /**
     * Group by Analysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalysisGroupByArgs['orderBy'] }
        : { orderBy?: AnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Analysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnalysisClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Recording<T extends Analysis$RecordingArgs= {}>(args?: Subset<T, Analysis$RecordingArgs>): Prisma.PrismaPromise<Array<RecordingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Analysis base type for findUnique actions
   */
  export type AnalysisFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * Filter, which Analysis to fetch.
     */
    where: AnalysisWhereUniqueInput
  }

  /**
   * Analysis findUnique
   */
  export interface AnalysisFindUniqueArgs extends AnalysisFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Analysis findUniqueOrThrow
   */
  export type AnalysisFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * Filter, which Analysis to fetch.
     */
    where: AnalysisWhereUniqueInput
  }


  /**
   * Analysis base type for findFirst actions
   */
  export type AnalysisFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * Filter, which Analysis to fetch.
     */
    where?: AnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analyses to fetch.
     */
    orderBy?: Enumerable<AnalysisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Analyses.
     */
    cursor?: AnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Analyses.
     */
    distinct?: Enumerable<AnalysisScalarFieldEnum>
  }

  /**
   * Analysis findFirst
   */
  export interface AnalysisFindFirstArgs extends AnalysisFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Analysis findFirstOrThrow
   */
  export type AnalysisFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * Filter, which Analysis to fetch.
     */
    where?: AnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analyses to fetch.
     */
    orderBy?: Enumerable<AnalysisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Analyses.
     */
    cursor?: AnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Analyses.
     */
    distinct?: Enumerable<AnalysisScalarFieldEnum>
  }


  /**
   * Analysis findMany
   */
  export type AnalysisFindManyArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * Filter, which Analyses to fetch.
     */
    where?: AnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analyses to fetch.
     */
    orderBy?: Enumerable<AnalysisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Analyses.
     */
    cursor?: AnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analyses.
     */
    skip?: number
    distinct?: Enumerable<AnalysisScalarFieldEnum>
  }


  /**
   * Analysis create
   */
  export type AnalysisCreateArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * The data needed to create a Analysis.
     */
    data: XOR<AnalysisCreateInput, AnalysisUncheckedCreateInput>
  }


  /**
   * Analysis createMany
   */
  export type AnalysisCreateManyArgs = {
    /**
     * The data used to create many Analyses.
     */
    data: Enumerable<AnalysisCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Analysis update
   */
  export type AnalysisUpdateArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * The data needed to update a Analysis.
     */
    data: XOR<AnalysisUpdateInput, AnalysisUncheckedUpdateInput>
    /**
     * Choose, which Analysis to update.
     */
    where: AnalysisWhereUniqueInput
  }


  /**
   * Analysis updateMany
   */
  export type AnalysisUpdateManyArgs = {
    /**
     * The data used to update Analyses.
     */
    data: XOR<AnalysisUpdateManyMutationInput, AnalysisUncheckedUpdateManyInput>
    /**
     * Filter which Analyses to update
     */
    where?: AnalysisWhereInput
  }


  /**
   * Analysis upsert
   */
  export type AnalysisUpsertArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * The filter to search for the Analysis to update in case it exists.
     */
    where: AnalysisWhereUniqueInput
    /**
     * In case the Analysis found by the `where` argument doesn't exist, create a new Analysis with this data.
     */
    create: XOR<AnalysisCreateInput, AnalysisUncheckedCreateInput>
    /**
     * In case the Analysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalysisUpdateInput, AnalysisUncheckedUpdateInput>
  }


  /**
   * Analysis delete
   */
  export type AnalysisDeleteArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
    /**
     * Filter which Analysis to delete.
     */
    where: AnalysisWhereUniqueInput
  }


  /**
   * Analysis deleteMany
   */
  export type AnalysisDeleteManyArgs = {
    /**
     * Filter which Analyses to delete
     */
    where?: AnalysisWhereInput
  }


  /**
   * Analysis.Recording
   */
  export type Analysis$RecordingArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    cursor?: RecordingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Analysis without action
   */
  export type AnalysisArgs = {
    /**
     * Select specific fields to fetch from the Analysis
     */
    select?: AnalysisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnalysisInclude | null
  }



  /**
   * Model Transcript
   */


  export type AggregateTranscript = {
    _count: TranscriptCountAggregateOutputType | null
    _min: TranscriptMinAggregateOutputType | null
    _max: TranscriptMaxAggregateOutputType | null
  }

  export type TranscriptMinAggregateOutputType = {
    id: string | null
    text: string | null
  }

  export type TranscriptMaxAggregateOutputType = {
    id: string | null
    text: string | null
  }

  export type TranscriptCountAggregateOutputType = {
    id: number
    text: number
    _all: number
  }


  export type TranscriptMinAggregateInputType = {
    id?: true
    text?: true
  }

  export type TranscriptMaxAggregateInputType = {
    id?: true
    text?: true
  }

  export type TranscriptCountAggregateInputType = {
    id?: true
    text?: true
    _all?: true
  }

  export type TranscriptAggregateArgs = {
    /**
     * Filter which Transcript to aggregate.
     */
    where?: TranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcripts to fetch.
     */
    orderBy?: Enumerable<TranscriptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transcripts
    **/
    _count?: true | TranscriptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TranscriptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TranscriptMaxAggregateInputType
  }

  export type GetTranscriptAggregateType<T extends TranscriptAggregateArgs> = {
        [P in keyof T & keyof AggregateTranscript]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTranscript[P]>
      : GetScalarType<T[P], AggregateTranscript[P]>
  }




  export type TranscriptGroupByArgs = {
    where?: TranscriptWhereInput
    orderBy?: Enumerable<TranscriptOrderByWithAggregationInput>
    by: TranscriptScalarFieldEnum[]
    having?: TranscriptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TranscriptCountAggregateInputType | true
    _min?: TranscriptMinAggregateInputType
    _max?: TranscriptMaxAggregateInputType
  }


  export type TranscriptGroupByOutputType = {
    id: string
    text: string
    _count: TranscriptCountAggregateOutputType | null
    _min: TranscriptMinAggregateOutputType | null
    _max: TranscriptMaxAggregateOutputType | null
  }

  type GetTranscriptGroupByPayload<T extends TranscriptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TranscriptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TranscriptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TranscriptGroupByOutputType[P]>
            : GetScalarType<T[P], TranscriptGroupByOutputType[P]>
        }
      >
    >


  export type TranscriptSelect = {
    id?: boolean
    text?: boolean
    Recording?: boolean | Transcript$RecordingArgs
    _count?: boolean | TranscriptCountOutputTypeArgs
  }


  export type TranscriptInclude = {
    Recording?: boolean | Transcript$RecordingArgs
    _count?: boolean | TranscriptCountOutputTypeArgs
  }

  export type TranscriptGetPayload<S extends boolean | null | undefined | TranscriptArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Transcript :
    S extends undefined ? never :
    S extends { include: any } & (TranscriptArgs | TranscriptFindManyArgs)
    ? Transcript  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Recording' ? Array < RecordingGetPayload<S['include'][P]>>  :
        P extends '_count' ? TranscriptCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TranscriptArgs | TranscriptFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Recording' ? Array < RecordingGetPayload<S['select'][P]>>  :
        P extends '_count' ? TranscriptCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Transcript ? Transcript[P] : never
  } 
      : Transcript


  type TranscriptCountArgs = 
    Omit<TranscriptFindManyArgs, 'select' | 'include'> & {
      select?: TranscriptCountAggregateInputType | true
    }

  export interface TranscriptDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Transcript that matches the filter.
     * @param {TranscriptFindUniqueArgs} args - Arguments to find a Transcript
     * @example
     * // Get one Transcript
     * const transcript = await prisma.transcript.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TranscriptFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TranscriptFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transcript'> extends True ? Prisma__TranscriptClient<TranscriptGetPayload<T>> : Prisma__TranscriptClient<TranscriptGetPayload<T> | null, null>

    /**
     * Find one Transcript that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TranscriptFindUniqueOrThrowArgs} args - Arguments to find a Transcript
     * @example
     * // Get one Transcript
     * const transcript = await prisma.transcript.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TranscriptFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TranscriptFindUniqueOrThrowArgs>
    ): Prisma__TranscriptClient<TranscriptGetPayload<T>>

    /**
     * Find the first Transcript that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptFindFirstArgs} args - Arguments to find a Transcript
     * @example
     * // Get one Transcript
     * const transcript = await prisma.transcript.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TranscriptFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TranscriptFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transcript'> extends True ? Prisma__TranscriptClient<TranscriptGetPayload<T>> : Prisma__TranscriptClient<TranscriptGetPayload<T> | null, null>

    /**
     * Find the first Transcript that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptFindFirstOrThrowArgs} args - Arguments to find a Transcript
     * @example
     * // Get one Transcript
     * const transcript = await prisma.transcript.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TranscriptFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TranscriptFindFirstOrThrowArgs>
    ): Prisma__TranscriptClient<TranscriptGetPayload<T>>

    /**
     * Find zero or more Transcripts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transcripts
     * const transcripts = await prisma.transcript.findMany()
     * 
     * // Get first 10 Transcripts
     * const transcripts = await prisma.transcript.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transcriptWithIdOnly = await prisma.transcript.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TranscriptFindManyArgs>(
      args?: SelectSubset<T, TranscriptFindManyArgs>
    ): Prisma.PrismaPromise<Array<TranscriptGetPayload<T>>>

    /**
     * Create a Transcript.
     * @param {TranscriptCreateArgs} args - Arguments to create a Transcript.
     * @example
     * // Create one Transcript
     * const Transcript = await prisma.transcript.create({
     *   data: {
     *     // ... data to create a Transcript
     *   }
     * })
     * 
    **/
    create<T extends TranscriptCreateArgs>(
      args: SelectSubset<T, TranscriptCreateArgs>
    ): Prisma__TranscriptClient<TranscriptGetPayload<T>>

    /**
     * Create many Transcripts.
     *     @param {TranscriptCreateManyArgs} args - Arguments to create many Transcripts.
     *     @example
     *     // Create many Transcripts
     *     const transcript = await prisma.transcript.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TranscriptCreateManyArgs>(
      args?: SelectSubset<T, TranscriptCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transcript.
     * @param {TranscriptDeleteArgs} args - Arguments to delete one Transcript.
     * @example
     * // Delete one Transcript
     * const Transcript = await prisma.transcript.delete({
     *   where: {
     *     // ... filter to delete one Transcript
     *   }
     * })
     * 
    **/
    delete<T extends TranscriptDeleteArgs>(
      args: SelectSubset<T, TranscriptDeleteArgs>
    ): Prisma__TranscriptClient<TranscriptGetPayload<T>>

    /**
     * Update one Transcript.
     * @param {TranscriptUpdateArgs} args - Arguments to update one Transcript.
     * @example
     * // Update one Transcript
     * const transcript = await prisma.transcript.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TranscriptUpdateArgs>(
      args: SelectSubset<T, TranscriptUpdateArgs>
    ): Prisma__TranscriptClient<TranscriptGetPayload<T>>

    /**
     * Delete zero or more Transcripts.
     * @param {TranscriptDeleteManyArgs} args - Arguments to filter Transcripts to delete.
     * @example
     * // Delete a few Transcripts
     * const { count } = await prisma.transcript.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TranscriptDeleteManyArgs>(
      args?: SelectSubset<T, TranscriptDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transcripts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transcripts
     * const transcript = await prisma.transcript.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TranscriptUpdateManyArgs>(
      args: SelectSubset<T, TranscriptUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transcript.
     * @param {TranscriptUpsertArgs} args - Arguments to update or create a Transcript.
     * @example
     * // Update or create a Transcript
     * const transcript = await prisma.transcript.upsert({
     *   create: {
     *     // ... data to create a Transcript
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transcript we want to update
     *   }
     * })
    **/
    upsert<T extends TranscriptUpsertArgs>(
      args: SelectSubset<T, TranscriptUpsertArgs>
    ): Prisma__TranscriptClient<TranscriptGetPayload<T>>

    /**
     * Count the number of Transcripts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptCountArgs} args - Arguments to filter Transcripts to count.
     * @example
     * // Count the number of Transcripts
     * const count = await prisma.transcript.count({
     *   where: {
     *     // ... the filter for the Transcripts we want to count
     *   }
     * })
    **/
    count<T extends TranscriptCountArgs>(
      args?: Subset<T, TranscriptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TranscriptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transcript.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TranscriptAggregateArgs>(args: Subset<T, TranscriptAggregateArgs>): Prisma.PrismaPromise<GetTranscriptAggregateType<T>>

    /**
     * Group by Transcript.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscriptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TranscriptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TranscriptGroupByArgs['orderBy'] }
        : { orderBy?: TranscriptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TranscriptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTranscriptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Transcript.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TranscriptClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Recording<T extends Transcript$RecordingArgs= {}>(args?: Subset<T, Transcript$RecordingArgs>): Prisma.PrismaPromise<Array<RecordingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Transcript base type for findUnique actions
   */
  export type TranscriptFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * Filter, which Transcript to fetch.
     */
    where: TranscriptWhereUniqueInput
  }

  /**
   * Transcript findUnique
   */
  export interface TranscriptFindUniqueArgs extends TranscriptFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transcript findUniqueOrThrow
   */
  export type TranscriptFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * Filter, which Transcript to fetch.
     */
    where: TranscriptWhereUniqueInput
  }


  /**
   * Transcript base type for findFirst actions
   */
  export type TranscriptFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * Filter, which Transcript to fetch.
     */
    where?: TranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcripts to fetch.
     */
    orderBy?: Enumerable<TranscriptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transcripts.
     */
    cursor?: TranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transcripts.
     */
    distinct?: Enumerable<TranscriptScalarFieldEnum>
  }

  /**
   * Transcript findFirst
   */
  export interface TranscriptFindFirstArgs extends TranscriptFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transcript findFirstOrThrow
   */
  export type TranscriptFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * Filter, which Transcript to fetch.
     */
    where?: TranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcripts to fetch.
     */
    orderBy?: Enumerable<TranscriptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transcripts.
     */
    cursor?: TranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transcripts.
     */
    distinct?: Enumerable<TranscriptScalarFieldEnum>
  }


  /**
   * Transcript findMany
   */
  export type TranscriptFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * Filter, which Transcripts to fetch.
     */
    where?: TranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcripts to fetch.
     */
    orderBy?: Enumerable<TranscriptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transcripts.
     */
    cursor?: TranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcripts.
     */
    skip?: number
    distinct?: Enumerable<TranscriptScalarFieldEnum>
  }


  /**
   * Transcript create
   */
  export type TranscriptCreateArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * The data needed to create a Transcript.
     */
    data: XOR<TranscriptCreateInput, TranscriptUncheckedCreateInput>
  }


  /**
   * Transcript createMany
   */
  export type TranscriptCreateManyArgs = {
    /**
     * The data used to create many Transcripts.
     */
    data: Enumerable<TranscriptCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transcript update
   */
  export type TranscriptUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * The data needed to update a Transcript.
     */
    data: XOR<TranscriptUpdateInput, TranscriptUncheckedUpdateInput>
    /**
     * Choose, which Transcript to update.
     */
    where: TranscriptWhereUniqueInput
  }


  /**
   * Transcript updateMany
   */
  export type TranscriptUpdateManyArgs = {
    /**
     * The data used to update Transcripts.
     */
    data: XOR<TranscriptUpdateManyMutationInput, TranscriptUncheckedUpdateManyInput>
    /**
     * Filter which Transcripts to update
     */
    where?: TranscriptWhereInput
  }


  /**
   * Transcript upsert
   */
  export type TranscriptUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * The filter to search for the Transcript to update in case it exists.
     */
    where: TranscriptWhereUniqueInput
    /**
     * In case the Transcript found by the `where` argument doesn't exist, create a new Transcript with this data.
     */
    create: XOR<TranscriptCreateInput, TranscriptUncheckedCreateInput>
    /**
     * In case the Transcript was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TranscriptUpdateInput, TranscriptUncheckedUpdateInput>
  }


  /**
   * Transcript delete
   */
  export type TranscriptDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
    /**
     * Filter which Transcript to delete.
     */
    where: TranscriptWhereUniqueInput
  }


  /**
   * Transcript deleteMany
   */
  export type TranscriptDeleteManyArgs = {
    /**
     * Filter which Transcripts to delete
     */
    where?: TranscriptWhereInput
  }


  /**
   * Transcript.Recording
   */
  export type Transcript$RecordingArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    cursor?: RecordingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Transcript without action
   */
  export type TranscriptArgs = {
    /**
     * Select specific fields to fetch from the Transcript
     */
    select?: TranscriptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranscriptInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    text: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    text: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    text: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    text?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    text?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    text?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    text: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    text?: boolean
    recordings?: boolean | User$recordingsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    recordings?: boolean | User$recordingsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'recordings' ? Array < RecordingGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'recordings' ? Array < RecordingGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    recordings<T extends User$recordingsArgs= {}>(args?: Subset<T, User$recordingsArgs>): Prisma.PrismaPromise<Array<RecordingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.recordings
   */
  export type User$recordingsArgs = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude | null
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    cursor?: RecordingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnalysisScalarFieldEnum: {
    id: 'id',
    text: 'text',
    summary: 'summary',
    sentiment: 'sentiment',
    flag: 'flag',
    caller_question: 'caller_question',
    employee_question: 'employee_question'
  };

  export type AnalysisScalarFieldEnum = (typeof AnalysisScalarFieldEnum)[keyof typeof AnalysisScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RecordingScalarFieldEnum: {
    cloudinaryID: 'cloudinaryID',
    cloudinaryURL: 'cloudinaryURL',
    name: 'name',
    userId: 'userId',
    analysisId: 'analysisId',
    transcriptId: 'transcriptId'
  };

  export type RecordingScalarFieldEnum = (typeof RecordingScalarFieldEnum)[keyof typeof RecordingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TranscriptScalarFieldEnum: {
    id: 'id',
    text: 'text'
  };

  export type TranscriptScalarFieldEnum = (typeof TranscriptScalarFieldEnum)[keyof typeof TranscriptScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    text: 'text'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type RecordingWhereInput = {
    AND?: Enumerable<RecordingWhereInput>
    OR?: Enumerable<RecordingWhereInput>
    NOT?: Enumerable<RecordingWhereInput>
    cloudinaryID?: StringFilter | string
    cloudinaryURL?: StringFilter | string
    name?: StringNullableFilter | string | null
    userId?: StringFilter | string
    analysisId?: StringNullableFilter | string | null
    transcriptId?: StringNullableFilter | string | null
    creator?: XOR<UserRelationFilter, UserWhereInput>
    analysis?: XOR<AnalysisRelationFilter, AnalysisWhereInput> | null
    transcript?: XOR<TranscriptRelationFilter, TranscriptWhereInput> | null
  }

  export type RecordingOrderByWithRelationInput = {
    cloudinaryID?: SortOrder
    cloudinaryURL?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    analysisId?: SortOrder
    transcriptId?: SortOrder
    creator?: UserOrderByWithRelationInput
    analysis?: AnalysisOrderByWithRelationInput
    transcript?: TranscriptOrderByWithRelationInput
  }

  export type RecordingWhereUniqueInput = {
    cloudinaryID?: string
  }

  export type RecordingOrderByWithAggregationInput = {
    cloudinaryID?: SortOrder
    cloudinaryURL?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    analysisId?: SortOrder
    transcriptId?: SortOrder
    _count?: RecordingCountOrderByAggregateInput
    _max?: RecordingMaxOrderByAggregateInput
    _min?: RecordingMinOrderByAggregateInput
  }

  export type RecordingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecordingScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecordingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecordingScalarWhereWithAggregatesInput>
    cloudinaryID?: StringWithAggregatesFilter | string
    cloudinaryURL?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    userId?: StringWithAggregatesFilter | string
    analysisId?: StringNullableWithAggregatesFilter | string | null
    transcriptId?: StringNullableWithAggregatesFilter | string | null
  }

  export type AnalysisWhereInput = {
    AND?: Enumerable<AnalysisWhereInput>
    OR?: Enumerable<AnalysisWhereInput>
    NOT?: Enumerable<AnalysisWhereInput>
    id?: StringFilter | string
    text?: StringFilter | string
    summary?: BoolFilter | boolean
    sentiment?: BoolFilter | boolean
    flag?: BoolFilter | boolean
    caller_question?: BoolFilter | boolean
    employee_question?: BoolFilter | boolean
    Recording?: RecordingListRelationFilter
  }

  export type AnalysisOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    summary?: SortOrder
    sentiment?: SortOrder
    flag?: SortOrder
    caller_question?: SortOrder
    employee_question?: SortOrder
    Recording?: RecordingOrderByRelationAggregateInput
  }

  export type AnalysisWhereUniqueInput = {
    id?: string
  }

  export type AnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    summary?: SortOrder
    sentiment?: SortOrder
    flag?: SortOrder
    caller_question?: SortOrder
    employee_question?: SortOrder
    _count?: AnalysisCountOrderByAggregateInput
    _max?: AnalysisMaxOrderByAggregateInput
    _min?: AnalysisMinOrderByAggregateInput
  }

  export type AnalysisScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnalysisScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnalysisScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnalysisScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
    summary?: BoolWithAggregatesFilter | boolean
    sentiment?: BoolWithAggregatesFilter | boolean
    flag?: BoolWithAggregatesFilter | boolean
    caller_question?: BoolWithAggregatesFilter | boolean
    employee_question?: BoolWithAggregatesFilter | boolean
  }

  export type TranscriptWhereInput = {
    AND?: Enumerable<TranscriptWhereInput>
    OR?: Enumerable<TranscriptWhereInput>
    NOT?: Enumerable<TranscriptWhereInput>
    id?: StringFilter | string
    text?: StringFilter | string
    Recording?: RecordingListRelationFilter
  }

  export type TranscriptOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    Recording?: RecordingOrderByRelationAggregateInput
  }

  export type TranscriptWhereUniqueInput = {
    id?: string
  }

  export type TranscriptOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    _count?: TranscriptCountOrderByAggregateInput
    _max?: TranscriptMaxOrderByAggregateInput
    _min?: TranscriptMinOrderByAggregateInput
  }

  export type TranscriptScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TranscriptScalarWhereWithAggregatesInput>
    OR?: Enumerable<TranscriptScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TranscriptScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    text?: StringFilter | string
    recordings?: RecordingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    recordings?: RecordingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
  }

  export type RecordingCreateInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    creator: UserCreateNestedOneWithoutRecordingsInput
    analysis?: AnalysisCreateNestedOneWithoutRecordingInput
    transcript?: TranscriptCreateNestedOneWithoutRecordingInput
  }

  export type RecordingUncheckedCreateInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    userId: string
    analysisId?: string | null
    transcriptId?: string | null
  }

  export type RecordingUpdateInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutRecordingsNestedInput
    analysis?: AnalysisUpdateOneWithoutRecordingNestedInput
    transcript?: TranscriptUpdateOneWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    analysisId?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingCreateManyInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    userId: string
    analysisId?: string | null
    transcriptId?: string | null
  }

  export type RecordingUpdateManyMutationInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingUncheckedUpdateManyInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    analysisId?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnalysisCreateInput = {
    id?: string
    text: string
    summary: boolean
    sentiment: boolean
    flag: boolean
    caller_question: boolean
    employee_question: boolean
    Recording?: RecordingCreateNestedManyWithoutAnalysisInput
  }

  export type AnalysisUncheckedCreateInput = {
    id?: string
    text: string
    summary: boolean
    sentiment: boolean
    flag: boolean
    caller_question: boolean
    employee_question: boolean
    Recording?: RecordingUncheckedCreateNestedManyWithoutAnalysisInput
  }

  export type AnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    summary?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: BoolFieldUpdateOperationsInput | boolean
    flag?: BoolFieldUpdateOperationsInput | boolean
    caller_question?: BoolFieldUpdateOperationsInput | boolean
    employee_question?: BoolFieldUpdateOperationsInput | boolean
    Recording?: RecordingUpdateManyWithoutAnalysisNestedInput
  }

  export type AnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    summary?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: BoolFieldUpdateOperationsInput | boolean
    flag?: BoolFieldUpdateOperationsInput | boolean
    caller_question?: BoolFieldUpdateOperationsInput | boolean
    employee_question?: BoolFieldUpdateOperationsInput | boolean
    Recording?: RecordingUncheckedUpdateManyWithoutAnalysisNestedInput
  }

  export type AnalysisCreateManyInput = {
    id?: string
    text: string
    summary: boolean
    sentiment: boolean
    flag: boolean
    caller_question: boolean
    employee_question: boolean
  }

  export type AnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    summary?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: BoolFieldUpdateOperationsInput | boolean
    flag?: BoolFieldUpdateOperationsInput | boolean
    caller_question?: BoolFieldUpdateOperationsInput | boolean
    employee_question?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    summary?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: BoolFieldUpdateOperationsInput | boolean
    flag?: BoolFieldUpdateOperationsInput | boolean
    caller_question?: BoolFieldUpdateOperationsInput | boolean
    employee_question?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TranscriptCreateInput = {
    id?: string
    text: string
    Recording?: RecordingCreateNestedManyWithoutTranscriptInput
  }

  export type TranscriptUncheckedCreateInput = {
    id?: string
    text: string
    Recording?: RecordingUncheckedCreateNestedManyWithoutTranscriptInput
  }

  export type TranscriptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    Recording?: RecordingUpdateManyWithoutTranscriptNestedInput
  }

  export type TranscriptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    Recording?: RecordingUncheckedUpdateManyWithoutTranscriptNestedInput
  }

  export type TranscriptCreateManyInput = {
    id?: string
    text: string
  }

  export type TranscriptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TranscriptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    text: string
    recordings?: RecordingCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    text: string
    recordings?: RecordingUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    recordings?: RecordingUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    recordings?: RecordingUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    text: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AnalysisRelationFilter = {
    is?: AnalysisWhereInput | null
    isNot?: AnalysisWhereInput | null
  }

  export type TranscriptRelationFilter = {
    is?: TranscriptWhereInput | null
    isNot?: TranscriptWhereInput | null
  }

  export type RecordingCountOrderByAggregateInput = {
    cloudinaryID?: SortOrder
    cloudinaryURL?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    analysisId?: SortOrder
    transcriptId?: SortOrder
  }

  export type RecordingMaxOrderByAggregateInput = {
    cloudinaryID?: SortOrder
    cloudinaryURL?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    analysisId?: SortOrder
    transcriptId?: SortOrder
  }

  export type RecordingMinOrderByAggregateInput = {
    cloudinaryID?: SortOrder
    cloudinaryURL?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    analysisId?: SortOrder
    transcriptId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type RecordingListRelationFilter = {
    every?: RecordingWhereInput
    some?: RecordingWhereInput
    none?: RecordingWhereInput
  }

  export type RecordingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    summary?: SortOrder
    sentiment?: SortOrder
    flag?: SortOrder
    caller_question?: SortOrder
    employee_question?: SortOrder
  }

  export type AnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    summary?: SortOrder
    sentiment?: SortOrder
    flag?: SortOrder
    caller_question?: SortOrder
    employee_question?: SortOrder
  }

  export type AnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    summary?: SortOrder
    sentiment?: SortOrder
    flag?: SortOrder
    caller_question?: SortOrder
    employee_question?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TranscriptCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type TranscriptMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type TranscriptMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type UserCreateNestedOneWithoutRecordingsInput = {
    create?: XOR<UserCreateWithoutRecordingsInput, UserUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecordingsInput
    connect?: UserWhereUniqueInput
  }

  export type AnalysisCreateNestedOneWithoutRecordingInput = {
    create?: XOR<AnalysisCreateWithoutRecordingInput, AnalysisUncheckedCreateWithoutRecordingInput>
    connectOrCreate?: AnalysisCreateOrConnectWithoutRecordingInput
    connect?: AnalysisWhereUniqueInput
  }

  export type TranscriptCreateNestedOneWithoutRecordingInput = {
    create?: XOR<TranscriptCreateWithoutRecordingInput, TranscriptUncheckedCreateWithoutRecordingInput>
    connectOrCreate?: TranscriptCreateOrConnectWithoutRecordingInput
    connect?: TranscriptWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutRecordingsNestedInput = {
    create?: XOR<UserCreateWithoutRecordingsInput, UserUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecordingsInput
    upsert?: UserUpsertWithoutRecordingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRecordingsInput, UserUncheckedUpdateWithoutRecordingsInput>
  }

  export type AnalysisUpdateOneWithoutRecordingNestedInput = {
    create?: XOR<AnalysisCreateWithoutRecordingInput, AnalysisUncheckedCreateWithoutRecordingInput>
    connectOrCreate?: AnalysisCreateOrConnectWithoutRecordingInput
    upsert?: AnalysisUpsertWithoutRecordingInput
    disconnect?: boolean
    delete?: boolean
    connect?: AnalysisWhereUniqueInput
    update?: XOR<AnalysisUpdateWithoutRecordingInput, AnalysisUncheckedUpdateWithoutRecordingInput>
  }

  export type TranscriptUpdateOneWithoutRecordingNestedInput = {
    create?: XOR<TranscriptCreateWithoutRecordingInput, TranscriptUncheckedCreateWithoutRecordingInput>
    connectOrCreate?: TranscriptCreateOrConnectWithoutRecordingInput
    upsert?: TranscriptUpsertWithoutRecordingInput
    disconnect?: boolean
    delete?: boolean
    connect?: TranscriptWhereUniqueInput
    update?: XOR<TranscriptUpdateWithoutRecordingInput, TranscriptUncheckedUpdateWithoutRecordingInput>
  }

  export type RecordingCreateNestedManyWithoutAnalysisInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutAnalysisInput>, Enumerable<RecordingUncheckedCreateWithoutAnalysisInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutAnalysisInput>
    createMany?: RecordingCreateManyAnalysisInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type RecordingUncheckedCreateNestedManyWithoutAnalysisInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutAnalysisInput>, Enumerable<RecordingUncheckedCreateWithoutAnalysisInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutAnalysisInput>
    createMany?: RecordingCreateManyAnalysisInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RecordingUpdateManyWithoutAnalysisNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutAnalysisInput>, Enumerable<RecordingUncheckedCreateWithoutAnalysisInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutAnalysisInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutAnalysisInput>
    createMany?: RecordingCreateManyAnalysisInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutAnalysisInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutAnalysisInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type RecordingUncheckedUpdateManyWithoutAnalysisNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutAnalysisInput>, Enumerable<RecordingUncheckedCreateWithoutAnalysisInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutAnalysisInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutAnalysisInput>
    createMany?: RecordingCreateManyAnalysisInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutAnalysisInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutAnalysisInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type RecordingCreateNestedManyWithoutTranscriptInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutTranscriptInput>, Enumerable<RecordingUncheckedCreateWithoutTranscriptInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutTranscriptInput>
    createMany?: RecordingCreateManyTranscriptInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type RecordingUncheckedCreateNestedManyWithoutTranscriptInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutTranscriptInput>, Enumerable<RecordingUncheckedCreateWithoutTranscriptInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutTranscriptInput>
    createMany?: RecordingCreateManyTranscriptInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type RecordingUpdateManyWithoutTranscriptNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutTranscriptInput>, Enumerable<RecordingUncheckedCreateWithoutTranscriptInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutTranscriptInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutTranscriptInput>
    createMany?: RecordingCreateManyTranscriptInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutTranscriptInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutTranscriptInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type RecordingUncheckedUpdateManyWithoutTranscriptNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutTranscriptInput>, Enumerable<RecordingUncheckedCreateWithoutTranscriptInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutTranscriptInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutTranscriptInput>
    createMany?: RecordingCreateManyTranscriptInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutTranscriptInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutTranscriptInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type RecordingCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutCreatorInput>, Enumerable<RecordingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutCreatorInput>
    createMany?: RecordingCreateManyCreatorInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type RecordingUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutCreatorInput>, Enumerable<RecordingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutCreatorInput>
    createMany?: RecordingCreateManyCreatorInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type RecordingUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutCreatorInput>, Enumerable<RecordingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: RecordingCreateManyCreatorInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type RecordingUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutCreatorInput>, Enumerable<RecordingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: RecordingCreateManyCreatorInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserCreateWithoutRecordingsInput = {
    id?: string
    text: string
  }

  export type UserUncheckedCreateWithoutRecordingsInput = {
    id?: string
    text: string
  }

  export type UserCreateOrConnectWithoutRecordingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecordingsInput, UserUncheckedCreateWithoutRecordingsInput>
  }

  export type AnalysisCreateWithoutRecordingInput = {
    id?: string
    text: string
    summary: boolean
    sentiment: boolean
    flag: boolean
    caller_question: boolean
    employee_question: boolean
  }

  export type AnalysisUncheckedCreateWithoutRecordingInput = {
    id?: string
    text: string
    summary: boolean
    sentiment: boolean
    flag: boolean
    caller_question: boolean
    employee_question: boolean
  }

  export type AnalysisCreateOrConnectWithoutRecordingInput = {
    where: AnalysisWhereUniqueInput
    create: XOR<AnalysisCreateWithoutRecordingInput, AnalysisUncheckedCreateWithoutRecordingInput>
  }

  export type TranscriptCreateWithoutRecordingInput = {
    id?: string
    text: string
  }

  export type TranscriptUncheckedCreateWithoutRecordingInput = {
    id?: string
    text: string
  }

  export type TranscriptCreateOrConnectWithoutRecordingInput = {
    where: TranscriptWhereUniqueInput
    create: XOR<TranscriptCreateWithoutRecordingInput, TranscriptUncheckedCreateWithoutRecordingInput>
  }

  export type UserUpsertWithoutRecordingsInput = {
    update: XOR<UserUpdateWithoutRecordingsInput, UserUncheckedUpdateWithoutRecordingsInput>
    create: XOR<UserCreateWithoutRecordingsInput, UserUncheckedCreateWithoutRecordingsInput>
  }

  export type UserUpdateWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type AnalysisUpsertWithoutRecordingInput = {
    update: XOR<AnalysisUpdateWithoutRecordingInput, AnalysisUncheckedUpdateWithoutRecordingInput>
    create: XOR<AnalysisCreateWithoutRecordingInput, AnalysisUncheckedCreateWithoutRecordingInput>
  }

  export type AnalysisUpdateWithoutRecordingInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    summary?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: BoolFieldUpdateOperationsInput | boolean
    flag?: BoolFieldUpdateOperationsInput | boolean
    caller_question?: BoolFieldUpdateOperationsInput | boolean
    employee_question?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AnalysisUncheckedUpdateWithoutRecordingInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    summary?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: BoolFieldUpdateOperationsInput | boolean
    flag?: BoolFieldUpdateOperationsInput | boolean
    caller_question?: BoolFieldUpdateOperationsInput | boolean
    employee_question?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TranscriptUpsertWithoutRecordingInput = {
    update: XOR<TranscriptUpdateWithoutRecordingInput, TranscriptUncheckedUpdateWithoutRecordingInput>
    create: XOR<TranscriptCreateWithoutRecordingInput, TranscriptUncheckedCreateWithoutRecordingInput>
  }

  export type TranscriptUpdateWithoutRecordingInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TranscriptUncheckedUpdateWithoutRecordingInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingCreateWithoutAnalysisInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    creator: UserCreateNestedOneWithoutRecordingsInput
    transcript?: TranscriptCreateNestedOneWithoutRecordingInput
  }

  export type RecordingUncheckedCreateWithoutAnalysisInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    userId: string
    transcriptId?: string | null
  }

  export type RecordingCreateOrConnectWithoutAnalysisInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutAnalysisInput, RecordingUncheckedCreateWithoutAnalysisInput>
  }

  export type RecordingCreateManyAnalysisInputEnvelope = {
    data: Enumerable<RecordingCreateManyAnalysisInput>
    skipDuplicates?: boolean
  }

  export type RecordingUpsertWithWhereUniqueWithoutAnalysisInput = {
    where: RecordingWhereUniqueInput
    update: XOR<RecordingUpdateWithoutAnalysisInput, RecordingUncheckedUpdateWithoutAnalysisInput>
    create: XOR<RecordingCreateWithoutAnalysisInput, RecordingUncheckedCreateWithoutAnalysisInput>
  }

  export type RecordingUpdateWithWhereUniqueWithoutAnalysisInput = {
    where: RecordingWhereUniqueInput
    data: XOR<RecordingUpdateWithoutAnalysisInput, RecordingUncheckedUpdateWithoutAnalysisInput>
  }

  export type RecordingUpdateManyWithWhereWithoutAnalysisInput = {
    where: RecordingScalarWhereInput
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyWithoutRecordingInput>
  }

  export type RecordingScalarWhereInput = {
    AND?: Enumerable<RecordingScalarWhereInput>
    OR?: Enumerable<RecordingScalarWhereInput>
    NOT?: Enumerable<RecordingScalarWhereInput>
    cloudinaryID?: StringFilter | string
    cloudinaryURL?: StringFilter | string
    name?: StringNullableFilter | string | null
    userId?: StringFilter | string
    analysisId?: StringNullableFilter | string | null
    transcriptId?: StringNullableFilter | string | null
  }

  export type RecordingCreateWithoutTranscriptInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    creator: UserCreateNestedOneWithoutRecordingsInput
    analysis?: AnalysisCreateNestedOneWithoutRecordingInput
  }

  export type RecordingUncheckedCreateWithoutTranscriptInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    userId: string
    analysisId?: string | null
  }

  export type RecordingCreateOrConnectWithoutTranscriptInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutTranscriptInput, RecordingUncheckedCreateWithoutTranscriptInput>
  }

  export type RecordingCreateManyTranscriptInputEnvelope = {
    data: Enumerable<RecordingCreateManyTranscriptInput>
    skipDuplicates?: boolean
  }

  export type RecordingUpsertWithWhereUniqueWithoutTranscriptInput = {
    where: RecordingWhereUniqueInput
    update: XOR<RecordingUpdateWithoutTranscriptInput, RecordingUncheckedUpdateWithoutTranscriptInput>
    create: XOR<RecordingCreateWithoutTranscriptInput, RecordingUncheckedCreateWithoutTranscriptInput>
  }

  export type RecordingUpdateWithWhereUniqueWithoutTranscriptInput = {
    where: RecordingWhereUniqueInput
    data: XOR<RecordingUpdateWithoutTranscriptInput, RecordingUncheckedUpdateWithoutTranscriptInput>
  }

  export type RecordingUpdateManyWithWhereWithoutTranscriptInput = {
    where: RecordingScalarWhereInput
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyWithoutRecordingInput>
  }

  export type RecordingCreateWithoutCreatorInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    analysis?: AnalysisCreateNestedOneWithoutRecordingInput
    transcript?: TranscriptCreateNestedOneWithoutRecordingInput
  }

  export type RecordingUncheckedCreateWithoutCreatorInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    analysisId?: string | null
    transcriptId?: string | null
  }

  export type RecordingCreateOrConnectWithoutCreatorInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutCreatorInput, RecordingUncheckedCreateWithoutCreatorInput>
  }

  export type RecordingCreateManyCreatorInputEnvelope = {
    data: Enumerable<RecordingCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type RecordingUpsertWithWhereUniqueWithoutCreatorInput = {
    where: RecordingWhereUniqueInput
    update: XOR<RecordingUpdateWithoutCreatorInput, RecordingUncheckedUpdateWithoutCreatorInput>
    create: XOR<RecordingCreateWithoutCreatorInput, RecordingUncheckedCreateWithoutCreatorInput>
  }

  export type RecordingUpdateWithWhereUniqueWithoutCreatorInput = {
    where: RecordingWhereUniqueInput
    data: XOR<RecordingUpdateWithoutCreatorInput, RecordingUncheckedUpdateWithoutCreatorInput>
  }

  export type RecordingUpdateManyWithWhereWithoutCreatorInput = {
    where: RecordingScalarWhereInput
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyWithoutRecordingsInput>
  }

  export type RecordingCreateManyAnalysisInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    userId: string
    transcriptId?: string | null
  }

  export type RecordingUpdateWithoutAnalysisInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutRecordingsNestedInput
    transcript?: TranscriptUpdateOneWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateWithoutAnalysisInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    transcriptId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingUncheckedUpdateManyWithoutRecordingInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    transcriptId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingCreateManyTranscriptInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    userId: string
    analysisId?: string | null
  }

  export type RecordingUpdateWithoutTranscriptInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutRecordingsNestedInput
    analysis?: AnalysisUpdateOneWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateWithoutTranscriptInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    analysisId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingCreateManyCreatorInput = {
    cloudinaryID?: string
    cloudinaryURL: string
    name?: string | null
    analysisId?: string | null
    transcriptId?: string | null
  }

  export type RecordingUpdateWithoutCreatorInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    analysis?: AnalysisUpdateOneWithoutRecordingNestedInput
    transcript?: TranscriptUpdateOneWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateWithoutCreatorInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    analysisId?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingUncheckedUpdateManyWithoutRecordingsInput = {
    cloudinaryID?: StringFieldUpdateOperationsInput | string
    cloudinaryURL?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    analysisId?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}